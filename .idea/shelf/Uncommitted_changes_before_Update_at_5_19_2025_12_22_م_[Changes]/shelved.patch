Index: app/src/main/java/com/example/sawaapplication/screens/communities/presentation/screens/CommunityScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sawaapplication.screens.communities.presentation.screens\r\n\r\nimport android.util.Log\r\nimport androidx.compose.foundation.BorderStroke\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.WindowInsets\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.wrapContentSize\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.icons.Icons\r\nimport androidx.compose.material.icons.filled.ArrowBack\r\nimport androidx.compose.material.icons.filled.Edit\r\nimport androidx.compose.material.icons.filled.Event\r\nimport androidx.compose.material.icons.filled.PersonAdd\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.ButtonDefaults\r\nimport androidx.compose.material3.ExperimentalMaterial3Api\r\nimport androidx.compose.material3.FabPosition\r\nimport androidx.compose.material3.FloatingActionButton\r\nimport androidx.compose.material3.FloatingActionButtonDefaults\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.IconButton\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedButton\r\nimport androidx.compose.material3.Scaffold\r\nimport androidx.compose.material3.Tab\r\nimport androidx.compose.material3.TabRow\r\nimport androidx.compose.material3.TabRowDefaults\r\nimport androidx.compose.material3.TabRowDefaults.tabIndicatorOffset\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.material3.TopAppBar\r\nimport androidx.compose.material3.TopAppBarDefaults\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.integerResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavHostController\r\nimport coil.compose.AsyncImage\r\nimport com.example.sawaapplication.R\r\nimport com.example.sawaapplication.screens.communities.presentation.vmModels.CommunityViewModel\r\nimport com.example.sawaapplication.screens.communities.presentation.vmModels.ExploreCommunityViewModel\r\nimport com.example.sawaapplication.screens.event.presentation.screens.formatDateString\r\nimport com.example.sawaapplication.screens.event.presentation.screens.formatTimestampToTimeString\r\nimport com.example.sawaapplication.screens.event.presentation.screens.getCityNameFromGeoPoint\r\nimport com.example.sawaapplication.screens.event.presentation.vmModels.FetchEventViewModel\r\nimport com.example.sawaapplication.screens.home.presentation.screens.component.EventCard\r\nimport com.example.sawaapplication.screens.post.domain.model.PostUiModel\r\nimport com.example.sawaapplication.ui.screenComponent.CustomConfirmationDialog\r\nimport com.example.sawaapplication.ui.theme.Gray\r\nimport com.example.sawaapplication.ui.theme.PrimaryOrange\r\nimport com.example.sawaapplication.ui.theme.black\r\nimport com.example.sawaapplication.ui.theme.white\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport java.net.URLEncoder\r\n\r\n\r\n\r\ndata class CommunityUiState(\r\n    val logoUrl: String,\r\n    val communityName: String,\r\n    val membersCount: String,\r\n    val communityDescription: String,\r\n    val posts: List<PostUiModel>\r\n)\r\n\r\n//private val FakeCommunityUiState = CommunityUiState(\r\n//    logoUrl = \"\",\r\n//    communityName = \"Saudi Innovation\",\r\n//    membersCount = \"2.5M\",\r\n//    communityDescription = \"This community fosters innovation across Saudi Arabia...\",\r\n//    posts = listOf(\r\n//        PostUiModel(\r\n//            \"@mohammed1\",\r\n//            userAvatarUrl = \"https://i.pravatar.cc/150?img=1\",\r\n//            postImageUrl = \"\"\r\n//        ),\r\n//        PostUiModel(\r\n//            \"@ahmed2\",\r\n//            userAvatarUrl = \"https://i.pravatar.cc/150?img=2\",\r\n//            postImageUrl = \"https://images.unsplash.com/photo-1593642634367-d91a135587b5\"\r\n//        )\r\n//    )\r\n//)\r\n\r\n@OptIn(ExperimentalMaterial3Api::class)\r\n@Composable\r\nfun CommunityScreen(\r\n    communityId: String,\r\n    viewModel: CommunityViewModel = hiltViewModel(),\r\n    eventViewModel: FetchEventViewModel = hiltViewModel(),\r\n    joinCommunityViewModel: ExploreCommunityViewModel = hiltViewModel(),\r\n    onBackPressed: () -> Unit,\r\n    onClick: (String) -> Unit,\r\n    navController: NavHostController\r\n) {\r\n    val context = LocalContext.current\r\n    val fetchEventViewModel: FetchEventViewModel = hiltViewModel()\r\n//    val uiState = FakeCommunityUiState\r\n    val userId = FirebaseAuth.getInstance().currentUser?.uid.orEmpty()\r\n    var selectedTab by remember { mutableIntStateOf(0) }\r\n    val tabs = listOf(stringResource(R.string.posts), stringResource(R.string.events))\r\n\r\n    val posts by viewModel.communityPosts.collectAsState()\r\n    var joinedevent by remember { mutableStateOf(false) }// we need to get the dynamic initial value\r\n    var joined by remember { mutableStateOf(false) }// we need to get the dynamic initial value\r\n    val communityDetail by viewModel.communityDetail.collectAsState()\r\n    //val events by eventViewModel.events.collectAsState()\r\n    val isUserJoined = communityDetail?.members?.contains(userId) == true\r\n    val hasJoinedOrLeft by joinCommunityViewModel.hasJoinedOrLeft.collectAsState()\r\n\r\n    var showLeaveCommunityDialog by remember { mutableStateOf(false) }\r\n\r\n    var showLeaveEventDialog by remember { mutableStateOf(false) }\r\n    var selectedEventId by remember { mutableStateOf<String?>(null) }\r\n\r\n    val events by fetchEventViewModel.events.collectAsState()\r\n\r\n    LaunchedEffect(communityId) {\r\n        Log.d(\"DEBUG\", \"CommunityScreen launched with id: $communityId\")\r\n        viewModel.fetchCommunityDetail(communityId)\r\n        viewModel.fetchPostsForCommunity(communityId)\r\n        fetchEventViewModel.loadEvents(communityId)\r\n    }\r\n    LaunchedEffect(Unit) {\r\n        kotlinx.coroutines.delay(500)\r\n        viewModel.fetchCommunityDetail(communityId)\r\n    }\r\n\r\n\r\n    var showLeaveCommunityDialog by remember { mutableStateOf(false) }\r\n\r\n    var showLeaveEventDialog by remember { mutableStateOf(false) }\r\n    var selectedEventId by remember { mutableStateOf<String?>(null) }\r\n\r\n\r\n    LaunchedEffect(hasJoinedOrLeft) {\r\n        if (hasJoinedOrLeft) {\r\n            viewModel.fetchCommunityDetail(communityId)\r\n            // Reset the flag so it doesn't re-trigger\r\n            joinCommunityViewModel.resetJoinLeaveState()\r\n        }\r\n    }\r\n\r\n    //Dialog for confirm leaving an event\r\n    if (showLeaveEventDialog && selectedEventId != null) {\r\n        CustomConfirmationDialog(\r\n            message = stringResource(R.string.areYouSureEvent),\r\n            onConfirm = {\r\n                eventViewModel.leaveEvent(\r\n                    communityId = communityId,\r\n                    eventId = selectedEventId!!,\r\n                    userId = userId\r\n                )\r\n                showLeaveEventDialog = false\r\n                selectedEventId = null\r\n            },\r\n            onDismiss = {\r\n                showLeaveEventDialog = false\r\n                selectedEventId = null\r\n            }\r\n        )\r\n    }\r\n\r\n    if (showLeaveCommunityDialog){\r\n        CustomConfirmationDialog(\r\n            message = stringResource(R.string.areYouSureCommunity),\r\n            onDismiss = {\r\n                showLeaveCommunityDialog = false\r\n            },\r\n            onConfirm = {\r\n                joinCommunityViewModel.leaveCommunity(communityId, userId)\r\n                viewModel.fetchCommunityDetail(communityId)\r\n                showLeaveCommunityDialog = false\r\n            },\r\n        )\r\n\r\n    }\r\n    Scaffold(\r\n        topBar = {\r\n            TopAppBar(\r\n                navigationIcon = {\r\n                    IconButton(onClick = { navController.popBackStack() }) {\r\n                        Icon(Icons.Default.ArrowBack, contentDescription = \"Back\")\r\n                    }\r\n                },\r\n                colors = TopAppBarDefaults.topAppBarColors(\r\n                    containerColor = MaterialTheme.colorScheme.background\r\n                ),\r\n                title = {},\r\n                windowInsets = WindowInsets(integerResource(R.integer.zero))\r\n            )\r\n        },\r\n        floatingActionButton = {\r\n            when (selectedTab) {\r\n                0 -> {\r\n                    // FAB for Posts tab\r\n                    FloatingActionButton(\r\n                        onClick = { navController.navigate(\"create_post/$communityId\") },\r\n                        modifier = Modifier.size(integerResource(R.integer.floatingActionButtonSize).dp),\r\n                        shape = CircleShape,\r\n                        containerColor = PrimaryOrange,\r\n                        contentColor = white,\r\n                        elevation = FloatingActionButtonDefaults.elevation(integerResource(R.integer.floatingActionButtonElevation).dp)\r\n                    ) {\r\n                        Icon(Icons.Default.Edit, contentDescription = \"Add Post\")\r\n                    }\r\n                }\r\n\r\n                1 -> {\r\n                    // FAB for Events tab\r\n                    FloatingActionButton(\r\n                        onClick = { navController.navigate(\"create_event/$communityId\") },\r\n                        modifier = Modifier.size(integerResource(R.integer.floatingActionButtonSize).dp),\r\n                        shape = CircleShape,\r\n                        containerColor = PrimaryOrange,\r\n                        contentColor = white,\r\n                        elevation = FloatingActionButtonDefaults.elevation(integerResource(R.integer.floatingActionButtonElevation).dp)\r\n                    ) {\r\n                        Icon(Icons.Default.Event, contentDescription = \"Add Event\")\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        floatingActionButtonPosition = FabPosition.End,\r\n        contentWindowInsets = WindowInsets(integerResource(R.integer.zero))\r\n    ) { innerPadding ->\r\n        LazyColumn(\r\n            modifier = Modifier.fillMaxSize(),\r\n            contentPadding = innerPadding,\r\n            verticalArrangement = Arrangement.spacedBy(integerResource(R.integer.lazyColumnSpacedBy).dp),\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            item {\r\n                Spacer(Modifier.height(integerResource(R.integer.itemSpacerH).dp))\r\n                AsyncImage(\r\n                    model = communityDetail?.image,\r\n                    contentDescription = null,\r\n                    modifier = Modifier\r\n                        .size(integerResource(R.integer.itemSpacerSize).dp)\r\n                        .clip(CircleShape),\r\n                    contentScale = ContentScale.Crop\r\n                )\r\n                Spacer(Modifier.height(integerResource(R.integer.itemSpacerH2nd).dp))\r\n                communityDetail?.let {\r\n                    Text(\r\n                        text = it.name,\r\n                        style = MaterialTheme.typography.titleLarge.copy(fontWeight = FontWeight.Bold),\r\n                        color = black\r\n                    )\r\n                }\r\n                Text(\r\n                    text = \"${communityDetail?.members?.size ?: 0} Members\",\r\n                    style = MaterialTheme.typography.bodyMedium,\r\n                    color = Gray\r\n                )\r\n                Spacer(Modifier.height(integerResource(R.integer.itemSpacerH2nd).dp))\r\n                communityDetail?.let {\r\n                    Text(\r\n                        text = it.description,\r\n                        style = MaterialTheme.typography.bodyMedium,\r\n                        color = black,\r\n                        textAlign = TextAlign.Center,\r\n                        modifier = Modifier.padding(horizontal = integerResource(R.integer.communityDetailHorizontalPadding).dp)\r\n                    )\r\n                }\r\n                Spacer(Modifier.height(integerResource(R.integer.itemSpacerH).dp))\r\n\r\n                if (isUserJoined) {\r\n                    Row(\r\n                        modifier = Modifier\r\n                            .fillMaxWidth()\r\n                            .padding(integerResource(R.integer.padding).dp),\r\n                        verticalAlignment = Alignment.CenterVertically,\r\n                        horizontalArrangement = Arrangement.Center,\r\n                    ) {\r\n                        //Un-joined button\r\n                        OutlinedButton(\r\n                            onClick = {\r\n                                //Leave Community\r\n                                showLeaveCommunityDialog=true\r\n//                                joinCommunityViewModel.leaveCommunity(communityId, userId)\r\n//                                viewModel.fetchCommunityDetail(communityId)\r\n                            },\r\n                            shape = RoundedCornerShape(integerResource(R.integer.roundedCornerShapeCircle)),\r\n                            colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primaryContainer),\r\n                            border = BorderStroke(\r\n                                integerResource(R.integer.buttonStroke).dp,\r\n                                PrimaryOrange\r\n                            ),\r\n                            contentPadding = PaddingValues(\r\n                                horizontal = integerResource(R.integer.buttonPaddingH).dp,\r\n                                vertical = integerResource(R.integer.buttonPaddingV).dp\r\n                            ),\r\n                            elevation = ButtonDefaults.buttonElevation(integerResource(R.integer.buttonElevation).dp),\r\n                            modifier = Modifier\r\n                                .weight(1f)\r\n                                .wrapContentSize()\r\n                        ) {\r\n                            Icon(\r\n                                painter = painterResource(R.drawable.unjoind),\r\n                                contentDescription = \"nu-join icon\",\r\n                                tint = PrimaryOrange,\r\n                                modifier = Modifier\r\n                                    .size(integerResource(R.integer.iconSize).dp),\r\n                            )\r\n                            Spacer(Modifier.width(integerResource(R.integer.itemSpacerH3ed).dp))\r\n                            Text(stringResource(R.string.joined))\r\n                        }\r\n\r\n                        //Go to chat button\r\n                        OutlinedButton(\r\n                            onClick = { navController.navigate(\"chat/${communityId}\") },\r\n                            shape = RoundedCornerShape(integerResource(R.integer.roundedCornerShapeCircle)),\r\n                            border = BorderStroke(\r\n                                integerResource(R.integer.buttonStroke).dp,\r\n                                PrimaryOrange\r\n                            ),\r\n                            colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.primaryContainer),\r\n                            contentPadding = PaddingValues(\r\n                                horizontal = integerResource(R.integer.buttonPaddingH).dp,\r\n                                integerResource(R.integer.buttonPaddingV).dp\r\n                            ),\r\n                            elevation = ButtonDefaults.buttonElevation(integerResource(R.integer.buttonElevation).dp),\r\n                            modifier = Modifier\r\n                                .weight(1f)\r\n                                .wrapContentSize()\r\n                        ) {\r\n                            Icon(\r\n                                painter = painterResource(R.drawable.chats),\r\n                                contentDescription = \"chat icon\",\r\n                                tint = PrimaryOrange,\r\n                                modifier = Modifier\r\n                                    .size(integerResource(R.integer.iconSize).dp),\r\n                            )\r\n                            Spacer(Modifier.width(integerResource(R.integer.itemSpacerH3ed).dp))\r\n                            Text(stringResource(R.string.chat))\r\n                        }\r\n                    }\r\n                } else {\r\n                    Button(\r\n                        onClick = {\r\n                            joinCommunityViewModel.joinCommunity(communityId, userId)\r\n                            viewModel.fetchCommunityDetail(communityId)\r\n                        },\r\n                        shape = RoundedCornerShape(integerResource(R.integer.roundedCornerShapeCircle)),\r\n                        colors = ButtonDefaults.buttonColors(containerColor = PrimaryOrange),\r\n                        contentPadding = PaddingValues(\r\n                            horizontal = integerResource(R.integer.buttonPaddingH).dp,\r\n                            vertical = integerResource(R.integer.buttonPaddingV).dp\r\n                        ),\r\n                        elevation = ButtonDefaults.buttonElevation(integerResource(R.integer.buttonElevation).dp)\r\n                    ) {\r\n                        Icon(Icons.Default.PersonAdd, contentDescription = null)\r\n                        Spacer(Modifier.width(integerResource(R.integer.itemSpacerH3ed).dp))\r\n                        Text(\r\n                            stringResource(R.string.joinCommunity),\r\n                            style = MaterialTheme.typography.bodyLarge\r\n                        )\r\n                    }\r\n                }\r\n\r\n                Spacer(Modifier.height(integerResource(R.integer.itemSpacerH).dp))\r\n\r\n                TabRow(\r\n                    selectedTabIndex = selectedTab,\r\n                    containerColor = white,\r\n                    indicator = { positions ->\r\n                        TabRowDefaults.Indicator(\r\n                            Modifier\r\n                                .tabIndicatorOffset(positions[selectedTab])\r\n                                .height(integerResource(R.integer.tabRowHeight).dp),\r\n                            color = PrimaryOrange\r\n                        )\r\n                    }\r\n                ) {\r\n                    tabs.forEachIndexed { i, title ->\r\n                        Tab(\r\n                            selected = selectedTab == i,\r\n                            onClick = { selectedTab = i },\r\n                            text = {\r\n                                Text(\r\n                                    title,\r\n                                    style = MaterialTheme.typography.bodyLarge,\r\n                                    color = if (selectedTab == i) black else Gray\r\n                                )\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n                Spacer(Modifier.height(integerResource(R.integer.itemSpacerH3ed).dp))\r\n            }\r\n\r\n            if (selectedTab == 0) {\r\n                items(posts) { post ->\r\n                    PostCard(\r\n                        post = PostUiModel(\r\n                            id = post.id,\r\n                            username      = post.username,\r\n                            userAvatarUrl = post.userAvatarUrl,\r\n                            postImageUrl  = post.postImageUrl,\r\n                            content       = post.content\r\n                        ),\r\n                        onImageClick = { imageUrl ->\r\n                            Log.d(\"FULLSCREEN\", \"Image URL passed: $imageUrl\")\r\n                            val encoded = URLEncoder.encode(imageUrl, \"utf-8\")\r\n                            onClick(encoded) // this triggers navigation to fullscreen screen\r\n                        }\r\n                    )\r\n\r\n                }\r\n            } else {\r\n                items(events) { event ->\r\n                    communityDetail?.let {\r\n                        val timeFormatted = event.time?.let { formatTimestampToTimeString(it) } ?: \"No time set\"\r\n                        val formattedDate = formatDateString(event.date)\r\n\r\n                        EventCard(\r\n                            image = event.imageUri,\r\n                            title = event.title,\r\n                            description = event.description,\r\n                            location = context.getCityNameFromGeoPoint(event.location),\r\n                            participants = event.memberLimit,\r\n                            joinedUsers = event.joinedUsers,\r\n                            community = it.name,\r\n                            time = timeFormatted,\r\n                            date = formattedDate,\r\n                            joined = event.joinedUsers.contains(userId),\r\n                            onJoinClick = {\r\n                                if (event.joinedUsers.contains(userId)) {\r\n                                    selectedEventId = event.id\r\n                                    showLeaveEventDialog = true\r\n//                                    eventViewModel.leaveEvent(\r\n//                                        communityId = communityId,\r\n//                                        eventId = event.id,\r\n//                                        userId = userId\r\n//                                    )\r\n                                } else {\r\n                                    eventViewModel.joinEvent(\r\n                                        communityId = communityId,\r\n                                        eventId = event.id,\r\n                                        userId = userId\r\n                                    )\r\n                                }\r\n                            },\r\n                            showCancelButton = true,\r\n                            modifier = Modifier.padding(4.dp)\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sawaapplication/screens/communities/presentation/screens/CommunityScreen.kt b/app/src/main/java/com/example/sawaapplication/screens/communities/presentation/screens/CommunityScreen.kt
--- a/app/src/main/java/com/example/sawaapplication/screens/communities/presentation/screens/CommunityScreen.kt	(revision ea3d1cf759ac018ed3440f7e8f5581e62315399c)
+++ b/app/src/main/java/com/example/sawaapplication/screens/communities/presentation/screens/CommunityScreen.kt	(date 1747646400996)
@@ -134,12 +134,8 @@
     //val events by eventViewModel.events.collectAsState()
     val isUserJoined = communityDetail?.members?.contains(userId) == true
     val hasJoinedOrLeft by joinCommunityViewModel.hasJoinedOrLeft.collectAsState()
-
-    var showLeaveCommunityDialog by remember { mutableStateOf(false) }
+    
 
-    var showLeaveEventDialog by remember { mutableStateOf(false) }
-    var selectedEventId by remember { mutableStateOf<String?>(null) }
-
     val events by fetchEventViewModel.events.collectAsState()
 
     LaunchedEffect(communityId) {
Index: app/src/main/java/com/example/sawaapplication/screens/home/presentation/screens/HomeScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.sawaapplication.screens.home.presentation.screens\r\n\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.material3.CircularProgressIndicator\r\nimport androidx.compose.material3.HorizontalDivider\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.integerResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.zIndex\r\nimport androidx.hilt.navigation.compose.hiltViewModel\r\nimport androidx.navigation.NavController\r\nimport com.example.sawaapplication.R\r\nimport com.example.sawaapplication.screens.event.presentation.screens.formatDateString\r\nimport com.example.sawaapplication.screens.event.presentation.screens.formatTimestampToTimeString\r\nimport com.example.sawaapplication.screens.event.presentation.vmModels.FetchEventViewModel\r\nimport com.example.sawaapplication.screens.home.presentation.screens.component.CustomTabRow\r\nimport com.example.sawaapplication.screens.home.presentation.screens.component.EventCard\r\nimport com.example.sawaapplication.screens.home.presentation.screens.component.PostCard\r\nimport com.example.sawaapplication.screens.home.presentation.vmModels.HomeViewModel\r\nimport com.example.sawaapplication.screens.notification.presentation.viewmodels.NotificationViewModel\r\nimport com.example.sawaapplication.ui.screenComponent.CustomConfirmationDialog\r\nimport com.example.sawaapplication.utils.getCityNameFromGeoPoint\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport androidx.compose.ui.res.stringResource\r\nimport com.example.sawaapplication.screens.event.presentation.screens.formatDateString\r\nimport com.example.sawaapplication.screens.event.presentation.screens.formatTimestampToTimeString\r\nimport com.example.sawaapplication.ui.screenComponent.CustomConfirmationDialog\r\nimport com.example.sawaapplication.utils.getCityNameFromGeoPoint\r\n\r\n\r\n\r\n@Composable\r\nfun HomeScreen(\r\n    navController: NavController,\r\n    viewModel: HomeViewModel = hiltViewModel()\r\n) {\r\n    var selectedTabIndex by remember { mutableIntStateOf(0) }\r\n    val tabs = listOf(stringResource(R.string.posts), stringResource(R.string.events))\r\n\r\n    Box(modifier = Modifier.fillMaxSize()) {\r\n\r\n        when (selectedTabIndex) {\r\n            0 -> PostsTab(viewModel, navController)\r\n            1 -> MyEventsTab() // implement if needed\r\n        }\r\n//\r\n        // Top transparent tab row\r\n        Box(\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(56.dp)\r\n                .align(Alignment.TopCenter)\r\n                .zIndex(1f)\r\n                .background(MaterialTheme.colorScheme.background.copy(alpha = 0.8f))\r\n        ) {\r\n            CustomTabRow(\r\n                tabs = tabs,\r\n                selectedTabIndex = selectedTabIndex,\r\n                onTabSelected = { selectedTabIndex = it }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun PostsTab(viewModel: HomeViewModel, navController: NavController) {\r\n    val posts by viewModel.posts.collectAsState()\r\n    val loading by viewModel.loading.collectAsState()\r\n    val error by viewModel.error.collectAsState()\r\n    val communityNames by viewModel.communityNames.collectAsState()\r\n    val userDetails by viewModel.userDetails.collectAsState()\r\n    val notificationViewModel: NotificationViewModel = hiltViewModel()\r\n\r\n    val postLikedUserId = viewModel.postLikedEvent.collectAsState().value\r\n\r\n    // Trigger a notification whenever a post is liked by a user\r\n    LaunchedEffect(postLikedUserId) {\r\n        postLikedUserId?.let { likedUserId ->\r\n            val post = posts.find { it.userId == likedUserId }\r\n            post?.let {\r\n                notificationViewModel.notifyLike(it)\r\n            }\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(Unit) {\r\n        viewModel.fetchAllPosts()\r\n    }\r\n\r\n\r\n    Box(modifier = Modifier.fillMaxSize()) {\r\n        when {\r\n            loading -> CircularProgressIndicator(Modifier.align(Alignment.Center))\r\n\r\n            error != null -> Text(\r\n                text = error ?: stringResource(R.string.unknownError),\r\n                color = MaterialTheme.colorScheme.error,\r\n                modifier = Modifier.align(Alignment.Center)\r\n            )\r\n\r\n            else ->\r\n                LazyColumn(\r\n                    contentPadding = PaddingValues(\r\n                        top = integerResource(R.integer.lazyColumnPaddingTop).dp,\r\n                        start = integerResource(R.integer.lazyColumnPaddingStartEnd).dp,\r\n                        end = integerResource(R.integer.lazyColumnPaddingStartEnd).dp,\r\n                        bottom = integerResource(R.integer.lazyColumnPaddingButton).dp\r\n                    ),\r\n                    verticalArrangement = Arrangement.spacedBy(integerResource(R.integer.lazyColumnArrangement).dp),\r\n                    modifier = Modifier.fillMaxSize()\r\n                ) {\r\n                    items(posts) { post ->\r\n                        val communityName =\r\n                            communityNames[post.communityId] ?: stringResource(R.string.unknown)\r\n                        val (userName, userImage) = userDetails[post.userId]\r\n                            ?: (stringResource(R.string.unknown) to \"\")\r\n                        PostCard(\r\n                            post,\r\n                            communityName,\r\n                            userName,\r\n                            userImage,\r\n                            onClick = {},\r\n                            onLikeClick = {\r\n                                viewModel.likePost(post)\r\n                                notificationViewModel.notifyLike(post)\r\n                            },\r\n                            navController = navController,\r\n                            onUserImageClick = { viewModel.likePost(post) }\r\n                        )\r\n\r\n                        HorizontalDivider(\r\n                            thickness = integerResource(R.integer.lazyColumnHorizontalDividerThickness).dp,\r\n                            color = MaterialTheme.colorScheme.outline.copy(alpha = 0.3f),\r\n                            modifier = Modifier.padding(vertical = integerResource(R.integer.smallerSpace).dp)\r\n                        )\r\n                    }\r\n                }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun MyEventsTab(\r\n    viewModel: HomeViewModel = hiltViewModel(),\r\n    eventViewModel: FetchEventViewModel = hiltViewModel(),\r\n) {\r\n    val events by viewModel.joinedEvents.collectAsState()\r\n    val loading by viewModel.loading.collectAsState()\r\n\r\n    val userId = FirebaseAuth.getInstance().currentUser?.uid ?: \"\"\r\n    val joinResult by eventViewModel.joinResult.collectAsState()\r\n\r\n    // Fetch community names\r\n\r\n\r\n\r\n    var showLeaveEventDialog by remember { mutableStateOf(false) }\r\n    var selectedEventId by remember { mutableStateOf<String?>(null) }\r\n    var selectedCommunityId by remember { mutableStateOf<String?>(null) }\r\n    val communityNames by viewModel.communityNames.collectAsState() // fetch community names\r\n\r\n    LaunchedEffect(Unit) {\r\n        viewModel.fetchJoinedEvents()\r\n    }\r\n\r\n    // Refresh the list after a successful cancel\r\n    LaunchedEffect(joinResult) {\r\n        if (joinResult?.isSuccess == true) {\r\n            viewModel.fetchJoinedEvents()\r\n        }\r\n    }\r\n\r\n\r\n    Box(modifier = Modifier.fillMaxSize()) {\r\n        when {\r\n            loading -> CircularProgressIndicator(Modifier.align(Alignment.Center))\r\n\r\n            events.isEmpty() -> Text(\r\n                \"No joined events\",\r\n                modifier = Modifier.align(Alignment.Center)\r\n            )\r\n\r\n            else -> LazyColumn(\r\n                modifier = Modifier.fillMaxSize(),\r\n                contentPadding = PaddingValues(top = 72.dp, bottom = 56.dp)\r\n            ) {\r\n                items(events) { event ->\r\n                    val communityName = communityNames[event.communityId] ?: \"Unknown Community\"\r\n                    val timeFormatted = event.time?.let { formatTimestampToTimeString(it) } ?: \"No time set\"\r\n                    val formattedDate = formatDateString(event.date)\r\n                    val context = LocalContext.current\r\n                    EventCard(\r\n                        image = event.imageUri,\r\n                        title = event.title,\r\n                        description = event.description,\r\n                        location = context.getCityNameFromGeoPoint(event.location),\r\n                        participants = event.memberLimit,\r\n                        joinedUsers = event.joinedUsers,\r\n                        community = communityName,\r\n                        time = timeFormatted,\r\n                        date = formattedDate,\r\n                        joined = event.joinedUsers.contains(userId),\r\n                        onJoinClick = {\r\n                            //leave event\r\n                            selectedEventId = event.id\r\n                            selectedCommunityId = event.communityId\r\n                            showLeaveEventDialog = true\r\n                        },\r\n                        showCancelButton = true,\r\n                        modifier = Modifier.padding(8.dp)\r\n                    )\r\n\r\n                }\r\n            }\r\n        }\r\n        //Dialog for confirm leaving an event\r\n        if (showLeaveEventDialog && selectedEventId != null && selectedCommunityId != null) {\r\n            CustomConfirmationDialog(\r\n                message = stringResource(R.string.areYouSureEvent),\r\n                onConfirm = {\r\n                    eventViewModel.leaveEvent(\r\n                        communityId = selectedCommunityId!!,\r\n                        eventId = selectedEventId!!,\r\n                        userId = userId\r\n                    )\r\n                    showLeaveEventDialog = false\r\n                    selectedEventId = null\r\n                    selectedCommunityId = null\r\n                },\r\n                onDismiss = {\r\n                    showLeaveEventDialog = false\r\n                    selectedEventId = null\r\n                    selectedCommunityId = null\r\n                }\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/sawaapplication/screens/home/presentation/screens/HomeScreen.kt b/app/src/main/java/com/example/sawaapplication/screens/home/presentation/screens/HomeScreen.kt
--- a/app/src/main/java/com/example/sawaapplication/screens/home/presentation/screens/HomeScreen.kt	(revision ea3d1cf759ac018ed3440f7e8f5581e62315399c)
+++ b/app/src/main/java/com/example/sawaapplication/screens/home/presentation/screens/HomeScreen.kt	(date 1747646033198)
@@ -65,7 +65,7 @@
             0 -> PostsTab(viewModel, navController)
             1 -> MyEventsTab() // implement if needed
         }
-//
+
         // Top transparent tab row
         Box(
             modifier = Modifier
